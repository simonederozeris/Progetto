# application.yml
--- 
spring: 
  application: 
    name: ricette
  cloud:
    consul:
      host: localhost
      port: 8500
      discovery: 
        instanceId: ${spring.application.name}-${spring.cloud.client.hostname}-${random.value}
        healthCheckPath: /actuator/health
        healthCheckInterval: 10s
        # configurazione per effettuare esprimenti, NON USARE UN PRODUZIONE 
        # dopo quanto tempo consul deve smettere di restituire servizi che non rispondono all'health check? 
        healthCheckCriticalTimeout: 60s
        # consul deve restituire solo servizi che passano l'health check (default=false) 
        queryPassing: true 
    loadbalancer: 
      ribbon.enabled: false 
  kafka:
  	bootstrap-servers=192.168.56.125:9092
	consumer:
		group-id=ricette
		auto-offset-reset=earliest
		key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
		value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
		properties.spring.json.trusted.packages=*
	producer:
		key-serializer=org.apache.kafka.common.serialization.StringSerializer
		value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
server: 
  port: 8082
#  port: 8080

# fa il logging dei comandi sql eseguiti 
#spring.jpa.show-sql: true
# disable OSIV
spring.jpa.open-in-view: false
